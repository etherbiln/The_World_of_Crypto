// SPDX-License-Identifier: SEE LICENSE IN LICENSE
pragma solidity ^0.8.2;

/**
 * @title AntiExploit
 * @dev A contract to manage player cooldowns and prevent exploitation in gaming ecosystems.
 * Features adjustable cooldown periods, admin controls, and secure state management.
 */
contract AntiExploit {
    /// @notice Address of the current admin
    address public admin;
    /// @notice Address waiting to accept admin role (two-step transfer)
    address public pendingAdmin;
    
    /// @notice Cooldown period between explorations (in seconds)
    uint256 public cooldownPeriod = 15 seconds;
    
    /// @dev Tracks last exploration timestamp for each player
    mapping(address => uint256) public lastExplorationTime;

    /// @notice Emitted when admin changes a player's exploration time
    event ExplorationTimeUpdated(address indexed player, uint256 timestamp);
    /// @notice Emitted when admin resets a player's exploration time
    event ExplorationTimeReset(address indexed player);
    /// @notice Emitted when a new admin is nominated
    event NewAdminNominated(address indexed newAdmin);
    /// @notice Emitted when admin rights are transferred
    event AdminUpdated(address indexed previousAdmin, address indexed newAdmin);

    /**
     * @dev Initializes contract with initial admin address
     * @param _admin Address of the initial contract admin
     */
    constructor(address _admin) {
        require(_admin != address(0), "Invalid admin address");
        admin = _admin;
        emit AdminUpdated(address(0), _admin);
    }

    // ======================= USER FUNCTIONS ======================= //
    
    /**
     * @notice Checks if player can perform exploration
     * @param player Address to check cooldown for
     * @return true if cooldown period has elapsed
     */
    function canExplore(address player) public view returns (bool) {
        if (lastExplorationTime[player] == 0) return true; // Allow first exploration
        return block.timestamp >= lastExplorationTime[player] + cooldownPeriod;
    }

    // ====================== ADMIN FUNCTIONS ======================= //
    
    /**
     * @notice Updates exploration timestamp for specified player
     * @dev Restricted to admin. Emits ExplorationTimeUpdated event.
     * @param player Address to update
     */
    function updateExplorationTime(address player) public onlyAdmin {
        require(player != address(0), "Invalid player address");
        lastExplorationTime[player] = block.timestamp;
        emit ExplorationTimeUpdated(player, block.timestamp);
    }

    /**
     * @notice Resets exploration timer for specified player
     * @dev Restricted to admin. Emits ExplorationTimeReset event.
     * @param player Address to reset
     */
    function resetExplorationTime(address player) public onlyAdmin {
        lastExplorationTime[player] = 0;
        emit ExplorationTimeReset(player);
    }

    /**
     * @notice Updates cooldown period duration
     * @dev Input in seconds. Restricted to admin.
     * @param newPeriod New cooldown duration in seconds
     */
    function setCooldownPeriod(uint256 newPeriod) external onlyAdmin {
        require(newPeriod <= 7 days, "Cooldown too long");
        cooldownPeriod = newPeriod;
    }

    // ==================== ADMIN TRANSFER FUNCTIONS ================= //
    
    /**
     * @notice Initiates admin transfer to new address
     * @dev New admin must call acceptAdmin to finalize
     * @param newAdmin Address of pending admin
     */
    function transferAdmin(address newAdmin) external onlyAdmin {
        require(newAdmin != address(0), "Invalid admin address");
        pendingAdmin = newAdmin;
        emit NewAdminNominated(newAdmin);
    }

    /**
     * @notice Completes admin transfer process
     * @dev Must be called by pendingAdmin
     */
    function acceptAdmin() external {
        require(msg.sender == pendingAdmin, "Caller not pending admin");
        emit AdminUpdated(admin, pendingAdmin);
        admin = pendingAdmin;
        pendingAdmin = address(0);
    }

    // ======================= UTILITY FUNCTIONS ====================== //
    
    /**
     * @notice Returns current block timestamp
     * @dev Helper function for frontend interactions
     */
    function getCurrentTimestamp() public view returns (uint256) {
        return block.timestamp;
    }

    // ======================== MODIFIERS ============================ //
    
    /// @dev Restricts function access to current admin
    modifier onlyAdmin() {
        require(msg.sender == admin, "Admin restricted function");
        _;
    }
}